# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.10.2
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: pytest

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
import speech_recognition as sr
import requests
import re
import wikipedia
import pyaudio

def get_answer(question):
    response = requests.get(f"https://www.google.com/search?q={question}")
    text = response.text
    match = re.search("<div class=\"BNeawe iBp4i AP7Wnd\">(.*?)</div>", text)
    if match:
        answer = match.group(1)
        return answer
    return None

r = sr.Recognizer()
with sr.Microphone() as source:
    print("Poser moi une question:")
    audio = r.listen(source)
    question = r.recognize_google(audio, language='fr-FR')
    print("Vous avez demandé: " + question)
    wikipedia.set_lang("fr")
    answer = wikipedia.summary(question, sentences=2)

    if answer:
        print("Réponse: " + answer)
    else:
        print("Désolé, je n'ai pas trouvé de réponse à votre question.")


from gtts import gTTS
import os

def speak(text):
    tts = gTTS(text=text, lang='fr')
    tts.save("answer.mp3")
    os.system("mpg321 answer.mp3")

if answer:
    print("Réponse: " + answer)
    speak(answer)
else:
    print("Désolé, je n'ai pas trouvé de réponse à votre question.")
    speak("Désolé, je n'ai pas trouvé de réponse à votre question.")
